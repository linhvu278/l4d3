//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Playa"",
            ""id"": ""c09b6824-b952-403c-9cd5-1539eec2c6de"",
            ""actions"": [
                {
                    ""name"": ""PlayerMovement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f1d07e21-db26-40d3-902a-c3a729886227"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseMovement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e93a5c11-018c-47e7-ac1b-55717954ae0b"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""b4469873-b643-4fc3-b2d5-376e8ec4b80a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""435b7025-9dbd-44ad-9845-29139730b8f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""6b66c2d3-2ded-41fa-8828-b24eb85529b2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switch"",
                    ""type"": ""Value"",
                    ""id"": ""a02bb9c9-e6af-41c5-bc2a-ff98862c9b43"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""428d119b-60eb-4f06-9edd-c7acc198306a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Primary"",
                    ""type"": ""Button"",
                    ""id"": ""3dc44221-8505-4b64-ab5f-269d8b3dbec0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Secondary"",
                    ""type"": ""Button"",
                    ""id"": ""80508c5e-1556-46ed-9bdf-f8cc34438b82"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Throwable"",
                    ""type"": ""Button"",
                    ""id"": ""81018b90-4038-49bd-8d4a-4dcf37cbbedf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Health"",
                    ""type"": ""Button"",
                    ""id"": ""8285bd40-f93b-4830-8d9e-6797e380a095"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Gadget"",
                    ""type"": ""Button"",
                    ""id"": ""890cb5d8-c74b-42fc-b528-bfaac9961e7a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack1"",
                    ""type"": ""Button"",
                    ""id"": ""285989bf-e56c-48c9-adc5-694f93d08be3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack2"",
                    ""type"": ""Button"",
                    ""id"": ""5f8b1554-1e23-402d-b760-5595c8ea9ff3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Kick"",
                    ""type"": ""Button"",
                    ""id"": ""6fbb16f4-e8d9-45f1-9fc8-0e88dda26772"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""07741bc2-636f-44c3-981c-400a0ce43859"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Unload"",
                    ""type"": ""Button"",
                    ""id"": ""689f4594-6f91-445c-bcd3-f0548f03ba57"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LastWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""e3f7c995-3dcf-42cb-8942-26ce35750b15"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""52bc7174-1c6a-4eaf-97a7-be8a5f57db35"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c15ff158-b1cf-4e6d-b11b-c2d570fa71fd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0b217e8a-3d74-435f-8f8f-ba6129090c5a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cd6d33c8-d6d8-4978-8111-8dbdfe4a54ff"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""01e57dda-e3a1-4405-845c-818b140d0247"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c73bf577-c997-482d-9649-8ce1338e3cf5"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2250f18b-a2c7-43d6-9e9a-b2013d6f8cee"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""36e3cbbc-0fa0-4c8c-8ec3-dde389ac0802"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d327458a-fc20-4f56-abed-09b071eef2da"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6857ad3f-93f8-4279-b7e5-52a4792948f5"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60cab303-95c3-4e61-a9c1-53689d86f87c"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9a613218-dccb-4817-8b92-e40c45f522f7"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e955f71a-dd33-4039-84b9-293fb6c25ba6"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Secondary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fbea808a-e371-45e9-9eb7-4313cabc9592"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Gadget"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c1bff90-f5c7-4858-aaea-6f2dfc3ba0f2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""84919844-ed34-41fd-bcdd-1a8e7fa0cb19"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d4225f5-6229-4eba-8d86-82e575c21b11"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Kick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""26c1887f-eb5a-4a9f-ad1f-cd7cfeadf8c4"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70d92513-314a-4388-879b-9181860d572b"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Health"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""704b3b46-57c6-47f4-a7b8-c64e2c42f2d6"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throwable"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e8bfd27-8765-47f0-8b0b-8423122a6b56"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Unload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2eb14018-ff44-49c7-aef1-aa9e322cd343"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LastWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Inventory"",
            ""id"": ""b8f435cd-b10b-4490-97a1-c3bfdfd21577"",
            ""actions"": [
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""60e40944-fd84-468f-9e06-08d897e97250"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a75bd47f-2419-4b7e-959e-2fa525e1a02d"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Playa
        m_Playa = asset.FindActionMap("Playa", throwIfNotFound: true);
        m_Playa_PlayerMovement = m_Playa.FindAction("PlayerMovement", throwIfNotFound: true);
        m_Playa_MouseMovement = m_Playa.FindAction("MouseMovement", throwIfNotFound: true);
        m_Playa_Jump = m_Playa.FindAction("Jump", throwIfNotFound: true);
        m_Playa_Sprint = m_Playa.FindAction("Sprint", throwIfNotFound: true);
        m_Playa_Crouch = m_Playa.FindAction("Crouch", throwIfNotFound: true);
        m_Playa_Switch = m_Playa.FindAction("Switch", throwIfNotFound: true);
        m_Playa_Interact = m_Playa.FindAction("Interact", throwIfNotFound: true);
        m_Playa_Primary = m_Playa.FindAction("Primary", throwIfNotFound: true);
        m_Playa_Secondary = m_Playa.FindAction("Secondary", throwIfNotFound: true);
        m_Playa_Throwable = m_Playa.FindAction("Throwable", throwIfNotFound: true);
        m_Playa_Health = m_Playa.FindAction("Health", throwIfNotFound: true);
        m_Playa_Gadget = m_Playa.FindAction("Gadget", throwIfNotFound: true);
        m_Playa_Attack1 = m_Playa.FindAction("Attack1", throwIfNotFound: true);
        m_Playa_Attack2 = m_Playa.FindAction("Attack2", throwIfNotFound: true);
        m_Playa_Kick = m_Playa.FindAction("Kick", throwIfNotFound: true);
        m_Playa_Reload = m_Playa.FindAction("Reload", throwIfNotFound: true);
        m_Playa_Unload = m_Playa.FindAction("Unload", throwIfNotFound: true);
        m_Playa_LastWeapon = m_Playa.FindAction("LastWeapon", throwIfNotFound: true);
        // Inventory
        m_Inventory = asset.FindActionMap("Inventory", throwIfNotFound: true);
        m_Inventory_Inventory = m_Inventory.FindAction("Inventory", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Playa
    private readonly InputActionMap m_Playa;
    private IPlayaActions m_PlayaActionsCallbackInterface;
    private readonly InputAction m_Playa_PlayerMovement;
    private readonly InputAction m_Playa_MouseMovement;
    private readonly InputAction m_Playa_Jump;
    private readonly InputAction m_Playa_Sprint;
    private readonly InputAction m_Playa_Crouch;
    private readonly InputAction m_Playa_Switch;
    private readonly InputAction m_Playa_Interact;
    private readonly InputAction m_Playa_Primary;
    private readonly InputAction m_Playa_Secondary;
    private readonly InputAction m_Playa_Throwable;
    private readonly InputAction m_Playa_Health;
    private readonly InputAction m_Playa_Gadget;
    private readonly InputAction m_Playa_Attack1;
    private readonly InputAction m_Playa_Attack2;
    private readonly InputAction m_Playa_Kick;
    private readonly InputAction m_Playa_Reload;
    private readonly InputAction m_Playa_Unload;
    private readonly InputAction m_Playa_LastWeapon;
    public struct PlayaActions
    {
        private @Controls m_Wrapper;
        public PlayaActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlayerMovement => m_Wrapper.m_Playa_PlayerMovement;
        public InputAction @MouseMovement => m_Wrapper.m_Playa_MouseMovement;
        public InputAction @Jump => m_Wrapper.m_Playa_Jump;
        public InputAction @Sprint => m_Wrapper.m_Playa_Sprint;
        public InputAction @Crouch => m_Wrapper.m_Playa_Crouch;
        public InputAction @Switch => m_Wrapper.m_Playa_Switch;
        public InputAction @Interact => m_Wrapper.m_Playa_Interact;
        public InputAction @Primary => m_Wrapper.m_Playa_Primary;
        public InputAction @Secondary => m_Wrapper.m_Playa_Secondary;
        public InputAction @Throwable => m_Wrapper.m_Playa_Throwable;
        public InputAction @Health => m_Wrapper.m_Playa_Health;
        public InputAction @Gadget => m_Wrapper.m_Playa_Gadget;
        public InputAction @Attack1 => m_Wrapper.m_Playa_Attack1;
        public InputAction @Attack2 => m_Wrapper.m_Playa_Attack2;
        public InputAction @Kick => m_Wrapper.m_Playa_Kick;
        public InputAction @Reload => m_Wrapper.m_Playa_Reload;
        public InputAction @Unload => m_Wrapper.m_Playa_Unload;
        public InputAction @LastWeapon => m_Wrapper.m_Playa_LastWeapon;
        public InputActionMap Get() { return m_Wrapper.m_Playa; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayaActions set) { return set.Get(); }
        public void SetCallbacks(IPlayaActions instance)
        {
            if (m_Wrapper.m_PlayaActionsCallbackInterface != null)
            {
                @PlayerMovement.started -= m_Wrapper.m_PlayaActionsCallbackInterface.OnPlayerMovement;
                @PlayerMovement.performed -= m_Wrapper.m_PlayaActionsCallbackInterface.OnPlayerMovement;
                @PlayerMovement.canceled -= m_Wrapper.m_PlayaActionsCallbackInterface.OnPlayerMovement;
                @MouseMovement.started -= m_Wrapper.m_PlayaActionsCallbackInterface.OnMouseMovement;
                @MouseMovement.performed -= m_Wrapper.m_PlayaActionsCallbackInterface.OnMouseMovement;
                @MouseMovement.canceled -= m_Wrapper.m_PlayaActionsCallbackInterface.OnMouseMovement;
                @Jump.started -= m_Wrapper.m_PlayaActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayaActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayaActionsCallbackInterface.OnJump;
                @Sprint.started -= m_Wrapper.m_PlayaActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_PlayaActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_PlayaActionsCallbackInterface.OnSprint;
                @Crouch.started -= m_Wrapper.m_PlayaActionsCallbackInterface.OnCrouch;
                @Crouch.performed -= m_Wrapper.m_PlayaActionsCallbackInterface.OnCrouch;
                @Crouch.canceled -= m_Wrapper.m_PlayaActionsCallbackInterface.OnCrouch;
                @Switch.started -= m_Wrapper.m_PlayaActionsCallbackInterface.OnSwitch;
                @Switch.performed -= m_Wrapper.m_PlayaActionsCallbackInterface.OnSwitch;
                @Switch.canceled -= m_Wrapper.m_PlayaActionsCallbackInterface.OnSwitch;
                @Interact.started -= m_Wrapper.m_PlayaActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_PlayaActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_PlayaActionsCallbackInterface.OnInteract;
                @Primary.started -= m_Wrapper.m_PlayaActionsCallbackInterface.OnPrimary;
                @Primary.performed -= m_Wrapper.m_PlayaActionsCallbackInterface.OnPrimary;
                @Primary.canceled -= m_Wrapper.m_PlayaActionsCallbackInterface.OnPrimary;
                @Secondary.started -= m_Wrapper.m_PlayaActionsCallbackInterface.OnSecondary;
                @Secondary.performed -= m_Wrapper.m_PlayaActionsCallbackInterface.OnSecondary;
                @Secondary.canceled -= m_Wrapper.m_PlayaActionsCallbackInterface.OnSecondary;
                @Throwable.started -= m_Wrapper.m_PlayaActionsCallbackInterface.OnThrowable;
                @Throwable.performed -= m_Wrapper.m_PlayaActionsCallbackInterface.OnThrowable;
                @Throwable.canceled -= m_Wrapper.m_PlayaActionsCallbackInterface.OnThrowable;
                @Health.started -= m_Wrapper.m_PlayaActionsCallbackInterface.OnHealth;
                @Health.performed -= m_Wrapper.m_PlayaActionsCallbackInterface.OnHealth;
                @Health.canceled -= m_Wrapper.m_PlayaActionsCallbackInterface.OnHealth;
                @Gadget.started -= m_Wrapper.m_PlayaActionsCallbackInterface.OnGadget;
                @Gadget.performed -= m_Wrapper.m_PlayaActionsCallbackInterface.OnGadget;
                @Gadget.canceled -= m_Wrapper.m_PlayaActionsCallbackInterface.OnGadget;
                @Attack1.started -= m_Wrapper.m_PlayaActionsCallbackInterface.OnAttack1;
                @Attack1.performed -= m_Wrapper.m_PlayaActionsCallbackInterface.OnAttack1;
                @Attack1.canceled -= m_Wrapper.m_PlayaActionsCallbackInterface.OnAttack1;
                @Attack2.started -= m_Wrapper.m_PlayaActionsCallbackInterface.OnAttack2;
                @Attack2.performed -= m_Wrapper.m_PlayaActionsCallbackInterface.OnAttack2;
                @Attack2.canceled -= m_Wrapper.m_PlayaActionsCallbackInterface.OnAttack2;
                @Kick.started -= m_Wrapper.m_PlayaActionsCallbackInterface.OnKick;
                @Kick.performed -= m_Wrapper.m_PlayaActionsCallbackInterface.OnKick;
                @Kick.canceled -= m_Wrapper.m_PlayaActionsCallbackInterface.OnKick;
                @Reload.started -= m_Wrapper.m_PlayaActionsCallbackInterface.OnReload;
                @Reload.performed -= m_Wrapper.m_PlayaActionsCallbackInterface.OnReload;
                @Reload.canceled -= m_Wrapper.m_PlayaActionsCallbackInterface.OnReload;
                @Unload.started -= m_Wrapper.m_PlayaActionsCallbackInterface.OnUnload;
                @Unload.performed -= m_Wrapper.m_PlayaActionsCallbackInterface.OnUnload;
                @Unload.canceled -= m_Wrapper.m_PlayaActionsCallbackInterface.OnUnload;
                @LastWeapon.started -= m_Wrapper.m_PlayaActionsCallbackInterface.OnLastWeapon;
                @LastWeapon.performed -= m_Wrapper.m_PlayaActionsCallbackInterface.OnLastWeapon;
                @LastWeapon.canceled -= m_Wrapper.m_PlayaActionsCallbackInterface.OnLastWeapon;
            }
            m_Wrapper.m_PlayaActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PlayerMovement.started += instance.OnPlayerMovement;
                @PlayerMovement.performed += instance.OnPlayerMovement;
                @PlayerMovement.canceled += instance.OnPlayerMovement;
                @MouseMovement.started += instance.OnMouseMovement;
                @MouseMovement.performed += instance.OnMouseMovement;
                @MouseMovement.canceled += instance.OnMouseMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
                @Switch.started += instance.OnSwitch;
                @Switch.performed += instance.OnSwitch;
                @Switch.canceled += instance.OnSwitch;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Primary.started += instance.OnPrimary;
                @Primary.performed += instance.OnPrimary;
                @Primary.canceled += instance.OnPrimary;
                @Secondary.started += instance.OnSecondary;
                @Secondary.performed += instance.OnSecondary;
                @Secondary.canceled += instance.OnSecondary;
                @Throwable.started += instance.OnThrowable;
                @Throwable.performed += instance.OnThrowable;
                @Throwable.canceled += instance.OnThrowable;
                @Health.started += instance.OnHealth;
                @Health.performed += instance.OnHealth;
                @Health.canceled += instance.OnHealth;
                @Gadget.started += instance.OnGadget;
                @Gadget.performed += instance.OnGadget;
                @Gadget.canceled += instance.OnGadget;
                @Attack1.started += instance.OnAttack1;
                @Attack1.performed += instance.OnAttack1;
                @Attack1.canceled += instance.OnAttack1;
                @Attack2.started += instance.OnAttack2;
                @Attack2.performed += instance.OnAttack2;
                @Attack2.canceled += instance.OnAttack2;
                @Kick.started += instance.OnKick;
                @Kick.performed += instance.OnKick;
                @Kick.canceled += instance.OnKick;
                @Reload.started += instance.OnReload;
                @Reload.performed += instance.OnReload;
                @Reload.canceled += instance.OnReload;
                @Unload.started += instance.OnUnload;
                @Unload.performed += instance.OnUnload;
                @Unload.canceled += instance.OnUnload;
                @LastWeapon.started += instance.OnLastWeapon;
                @LastWeapon.performed += instance.OnLastWeapon;
                @LastWeapon.canceled += instance.OnLastWeapon;
            }
        }
    }
    public PlayaActions @Playa => new PlayaActions(this);

    // Inventory
    private readonly InputActionMap m_Inventory;
    private IInventoryActions m_InventoryActionsCallbackInterface;
    private readonly InputAction m_Inventory_Inventory;
    public struct InventoryActions
    {
        private @Controls m_Wrapper;
        public InventoryActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Inventory => m_Wrapper.m_Inventory_Inventory;
        public InputActionMap Get() { return m_Wrapper.m_Inventory; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InventoryActions set) { return set.Get(); }
        public void SetCallbacks(IInventoryActions instance)
        {
            if (m_Wrapper.m_InventoryActionsCallbackInterface != null)
            {
                @Inventory.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnInventory;
                @Inventory.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnInventory;
                @Inventory.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnInventory;
            }
            m_Wrapper.m_InventoryActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Inventory.started += instance.OnInventory;
                @Inventory.performed += instance.OnInventory;
                @Inventory.canceled += instance.OnInventory;
            }
        }
    }
    public InventoryActions @Inventory => new InventoryActions(this);
    public interface IPlayaActions
    {
        void OnPlayerMovement(InputAction.CallbackContext context);
        void OnMouseMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnSwitch(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnPrimary(InputAction.CallbackContext context);
        void OnSecondary(InputAction.CallbackContext context);
        void OnThrowable(InputAction.CallbackContext context);
        void OnHealth(InputAction.CallbackContext context);
        void OnGadget(InputAction.CallbackContext context);
        void OnAttack1(InputAction.CallbackContext context);
        void OnAttack2(InputAction.CallbackContext context);
        void OnKick(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
        void OnUnload(InputAction.CallbackContext context);
        void OnLastWeapon(InputAction.CallbackContext context);
    }
    public interface IInventoryActions
    {
        void OnInventory(InputAction.CallbackContext context);
    }
}
